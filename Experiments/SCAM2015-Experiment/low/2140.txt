static public boolean HelperConvertNumberToText(int num, String[] result)

  {

      String [] strones = {

              "???", "???", "??", "???", "?????", "????????", "????????", "???????",

              "????????", "???", "??????", "??????", "?????", "??????",

              "????????", "???????????", "???????????", "??????????", "???????????",

            };



      String [] strtens = {

          "???", "????", "??????", "?????", "?????", "??????",

          "??????", "???????", "?????", "?????"

      };



      result[0] = "";

      int single, tens, hundreds;



      if(num > 1000)

          return false;



      hundreds = num / 100;

      num = num - hundreds * 100;

      if( num < 20)

      {

          tens = 0; // special case

          single = num;

      }

      else

      {

          tens = num / 10;

          num = num - tens * 10;

          single = num;

      }



      if(hundreds > 0)

      {

         result[0] += strones[hundreds-1];

         result[0] += "??";

      }

      if(tens > 0)

      {

         result[0] += strtens[tens - 1];

         result[0] += "";

      }

      if(single > 0)

      {

         result[0] += strones[single - 1];

         result[0] += "";

      }

      return true;

  }



  static public boolean ConvertNumberToText(int num, String[] result)

  {

      String tempString[] = new String[1];

      tempString[0] = "";

      int thousands;

      int temp;

      result[0] = "";

      if(num < 0 || num > 100000)

      {

          System.out.println(num + " \tNot Supported");

          return false;

      }



      if( num == 0)

      {

         System.out.println("?????");

         return false;

      }



      if(num < 1000)

      {  

          HelperConvertNumberToText(num, tempString);

          result[0] += tempString[0];

      }

      else

      {

          thousands = num / 1000;

          temp = num - thousands * 1000;

          HelperConvertNumberToText(thousands, tempString);

          result[0] += tempString[0];

          result[0] += "????";             

          HelperConvertNumberToText(temp, tempString);

          result[0] += tempString[0];

      }

      return true;

  }
public static String[] convertToString(double value){
      BigDecimal bd = new BigDecimal(Double.toString(value));
      String [] rawSplit = bd.toPlainString().split("\\.");
      return rawSplit;
  }
public static String getDoubleToword(double value) {
    String afterPoint = "";
    String strWord = "";
    String[] strArray = new String[1];
    strArray = NumberToKhmerWords.convertToString(value);
    String[] result = new String[1];
    result[0] = "";
    String zero = "";
    if (!strArray[1].equals("0")) {
        if (NumberToKhmerWords.ConvertNumberToText(
                Integer.parseInt(strArray[1].substring(0, 2)), result)) {
            if (Integer.parseInt(strArray[1].substring(0, 1)) == 0) {
                zero = "?????";
            }
            afterPoint = "??????" + zero + result[0];
        }

    }
    if (NumberToKhmerWords.ConvertNumberToText(Integer.parseInt(strArray[0]),
            result)) {
        strWord = result[0] + afterPoint;
    }
    return strWord;
}