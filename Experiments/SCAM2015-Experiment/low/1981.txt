/**
 * Xincrol - Unique and Random Number Generator
 * Xincrol.java
 * Purpose: Generating unique random numbers in specified range.
 *
 * @author Tofig Kareemov
 * @version 1.2 2013.04.28
 */
package androphic.estereos.lib.algs;

public class Xincrol {
    // Private Data...
    private int iUniqueSeed = 0;
    private int[] iKey = new int[8];
    private int iSet = 0;
    private int iSystemID = 0;

    // Constructor
    public Xincrol() {
        iSystemID = System.getProperties().toString().hashCode();
        for (int i = 0; i < iKey.length; ++i) {
            iKey[i] = i;
        }
        reset(Integer.MAX_VALUE);
    }

    // .

    // Private Methods...
    private void reset(int iBase) {
        iUniqueSeed = 0;
        iKey[0] ^= iSystemID;
        iKey[1] ^= (int) System.nanoTime();
        iKey[2] ^= (int) (System.nanoTime() >> 32);
        iKey[3] ^= (int) System.currentTimeMillis();
        iKey[4] ^= (int) (System.currentTimeMillis() >> 32);
        iKey[5] ^= 0xa5a5a5a5;
        iKey[6] ^= 0x5a5a5a5a;
        iKey[7] ^= 0xff00ff00;
        int iGlue = iKey[iKey.length - 1];
        int iBaseMask = iBase - 1;
        for (int i1 = 0; i1 < 2; ++i1) {
            for (int i = 0; i < iKey.length; ++i) {
                iGlue = iGlue ^ iKey[i] ^ i;
                if ((iKey[i] & 1) == 0) {
                    iGlue = INC(iGlue, iBaseMask);
                } else {
                    iGlue = DEC(iGlue, iBaseMask);
                }
                if ((iKey[i] & 2) == 0) {
                    iGlue = ROL(iGlue, iBaseMask);
                } else {
                    iGlue = ROR(iGlue, iBaseMask);
                }
                iKey[i] = XOR(iGlue, iKey[i], iBaseMask);
            }
        }
        iSet = iKey[iKey.length - 1] & 3;
    }

    // Set 1 Function
    private int XOR(int iA, int iB, int iBaseMask) {
        return ((iA ^ iB) & iBaseMask);
    }

    private int INC(int iA, int iBaseMask) {
        return ((++iA) & iBaseMask);
    }

    private int ROL(int iA, int iBaseMask) {
        iA <<= 1;
        if (iA > iBaseMask) {
            iA |= 1;
        }
        return (iA & iBaseMask);
    }

    // .

    // Set 2 Functions
    private int DEC(int iA, int iBaseMask) {
        return ((--iA) & iBaseMask);
    }

    private int ROR(int iA, int iBaseMask) {
        if ((iA & 0x00000001) == 1) {
            return ((iA >>> 1) & iBaseMask) | ((iBaseMask + 1) >>> 1);
        } else {
            return ((iA >>> 1) & iBaseMask);
        }
    }

    // .
    // .

    // Public Methods

    public synchronized void randomize(int iRange) {
        int iBase = 1;

        if (iRange <= 0) {
            return;
        }
        for (; iBase < iRange; iBase <<= 1) {
        }
        reset(iBase);
    }

    public int incdec(int iA, int iSet, int iBaseMask) {
        switch (iSet) {
        case 0:
            return INC(iA, iBaseMask);
        case 1:
            return DEC(iA, iBaseMask);
        case 2:
            return INC(iA, iBaseMask);
        case 3:
            return DEC(iA, iBaseMask);
        default:
            return 0;
        }
    }

    public int rolror(int iA, int iSet, int iBaseMask) {
        switch (iSet) {
        case 0:
            return ROL(iA, iBaseMask);
        case 1:
            return ROL(iA, iBaseMask);
        case 2:
            return ROR(iA, iBaseMask);
        case 3:
            return ROR(iA, iBaseMask);
        default:
            return 0;
        }
    }

    public synchronized int next(int iRange) {
        int iResult = iRange;
        int iBase = 1;

        for (; iBase < iRange; iBase <<= 1) {
        }
        if ((iKey == null) || (iUniqueSeed >= iBase)) {
            reset(iBase);
        }
        int iBaseMask = iBase - 1;
        for (int i = 0; (i < iBase) && (iResult >= iRange); ++i) {
            iUniqueSeed = (++iUniqueSeed) % iBase;
            iResult = iUniqueSeed;
            for (int i1 = 0; i1 < iKey.length; ++i1) {
                iResult = XOR(iResult, iKey[i1], iBaseMask);
                for (int i2 = iKey[i1] | iBase; i2 > 1; i2 >>>= 1) {
                    if ((i2 & 1) == 1) {
                        iResult = incdec(iResult, iSet, iBaseMask);
                    } else {
                        iResult = rolror(iResult, iSet, iBaseMask);
                    }
                }
            }
        }
        return iResult;
    }

    public synchronized int prev(int iRange) {
        int iResult = iRange;
        int iBase = 1;

        if (iRange <= 0) {
            return 0;
        }
        for (; iBase < iRange; iBase <<= 1) {
        }
        if ((iKey == null) || (iUniqueSeed >= iBase)) {
            reset(iBase);
        }
        int iBaseMask = iBase - 1;
        for (int i = 0; (i < iBase) && (iResult >= iRange); ++i) {
            iUniqueSeed = (--iUniqueSeed) % iBase;
            iResult = iUniqueSeed;
            for (int i1 = 0; i1 < iKey.length; ++i1) {
                iResult = XOR(iResult, iKey[i1], iBaseMask);
                for (int i2 = iKey[i1] | iBase; i2 > 1; i2 >>>= 1) {
                    if ((i2 & 1) == 1) {
                        iResult = incdec(iResult, iSet, iBaseMask);
                    } else {
                        iResult = rolror(iResult, iSet, iBaseMask);
                    }
                }
            }
        }
        return iResult;
    }

    public synchronized int random(int iRange) {
        randomize(iRange);
        return iKey[iKey.length - 1];
    }

    // .

    public static void main(String[] args) {
        Xincrol oXincrol = new Xincrol();
        int iRange = 10;
        int iTries = 100;
        int iValueStringLength = ("" + (iRange - 1)).length();
        int[] iTest = new int[iRange];
        for (int i1 = 0; i1 < iTries; ++i1) {
            for (int i2 = 0; i2 < iRange; ++i2) {
                // Printing progress
                if (i2 == 0) {
                    System.out.print("" + (i1 * 100 / iTries) + "%, " + i1
                            + ": ");
                }
                // Generating
                iTest[i2] = oXincrol.next(iRange);
                // Printing values
                String s = "" + iTest[i2];
                for (; s.length() < iValueStringLength; s = " " + s) {
                }
                System.out.print(s);
                // Printing end of line
                if (i2 == iRange - 1) {
                    System.out.println();
                    // Testing for successful generation
                    boolean bSuccess = false;
                    for (int i3 = 0; i3 < iTest.length; ++i3) {
                        bSuccess = false;
                        for (int i4 = 0; i4 < iTest.length; ++i4) {
                            if (iTest[i4] == i3) {
                                bSuccess = true;
                            }
                        }
                        if (!bSuccess) {
                            System.out.println("Error!!!");
                            System.exit(1);
                        }
                    }
                    // Randomizing for the next line
                    System.out.flush();
                    oXincrol.randomize(iRange);
                } else {
                    System.out.print(",");
                }
            }
        }
        System.out.println("Success!!!");
    }
}