package com.amit.parking.parking.Analytics;

import android.widget.EditText;

import java.util.ArrayList;

/**
 * Created by Android Developer on 3/1/2015.
 */
public class EmailValidator {

private static String email;
private static int count = 0;


private static final Character [] alphabeticSmall = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
private static final Character [] alphabeticLarge = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
private static final Character [] forbiddenSymbols = {
        '\'','^','[',',','!','#','$','%','&','*','+','/','=',
        '?','`','{','|','}','~',']','(',')',':','\\',' ','÷'
        ,'×','?','<','>','|',';','"','?','¥','£','€','`','°'
        ,'•','?','?','?','¦','?','?','?','?','?','¤','«',
        '»','¡','¿'
};

private String[] validEnds = {"ac", "ad", "ae", "aero", "af", "ag", "ai",
        "al", "am", "an", "ao", "aq", "ar", "arpa", "as", "asia", "at", "au",
        "aw", "ax", "az", "ba", "bb", "bd", "be", "bf", "bg", "bh", "bi", "biz",
        "bj", "bm", "bn", "bo", "br", "bs", "bt", "bv", "bw", "by", "bz", "ca",
        "cat", "cc", "cd", "cf", "cg", "ch", "ci", "ck", "cl", "cm", "cn", "co",
        "com", "coop", "cr", "cu", "cv", "cx", "cy", "cz", "de", "dj", "dk",
        "dm", "do", "dz", "ec", "edu", "ee", "eg", "er", "es", "et", "eu", "fi",
        "fj", "fk", "fm", "fo", "fr", "ga", "gb", "gd", "ge", "gf", "gg", "gh",
        "gi", "gl", "gm", "gn", "gov", "gp", "gq", "gr", "gs", "gt", "gu", "gw",
        "gy", "hk", "hm", "hn", "hr", "ht", "hu", "id", "ie", "il", "im", "in",
        "info", "int", "io", "iq", "ir", "is", "it", "je", "jm", "jo", "jobs",
        "jp", "ke", "kg", "kh", "ki", "km", "kn", "kp", "kr", "kw", "ky", "kz",
        "la", "lb", "lc", "li", "lk", "lr", "ls", "lt", "lu", "lv", "ly", "ma",
        "mc", "md", "me", "mg", "mh", "mil", "mk", "ml", "mm", "mn", "mo",
        "mobi", "mp", "mq", "mr", "ms", "mt", "mu", "museum", "mv", "mw", "mx",
        "my", "mz", "na", "name", "nc", "ne", "net", "nf", "ng", "ni", "nl",
        "no", "np", "nr", "nu", "nz", "om", "org", "pa", "pe", "pf", "pg", "ph",
        "pk", "pl", "pm", "pn", "pr", "pro", "ps", "pt", "pw", "py", "qa", "re",
        "ro", "rs", "ru", "rw", "sa", "sb", "sc", "sd", "se", "sg", "sh", "si",
        "sj", "sk", "sl", "sm", "sn", "so", "sr", "st", "su", "sv", "sy", "sz",
        "tc", "td", "tel", "tf", "tg", "th", "tj", "tk", "tl", "tm", "tn", "to",
        "tp", "tr", "travel", "tt", "tv", "tw", "tz", "ua", "ug", "uk", "um",
        "us", "uy", "uz", "va", "vc", "ve", "vg", "vi", "vn", "vu", "wf", "ws",
        "ye", "yt", "yu", "za", "zm", "zw"};

private static ArrayList<Character> correctSmallLetters;
private static ArrayList<Character> correctLargeLetters;
private static ArrayList<Character> forbiddenSymbolsArray;

private static CharSequence cleanText = "";
private static CharSequence [] cleanTextToArray;

private static int dynamicArraySize = 1;
private static Character [] dynamicArray;

public EmailValidator(String email){
    this.email = email;
    correctSmallLetters = new ArrayList<>();
    correctLargeLetters = new ArrayList<>();
    forbiddenSymbolsArray = new ArrayList<>();
}

public static boolean isEmailCharactersValidated(){
        if(equalsGetSmallLetters() || equalsGetLargeLetters()){
            return true;
        }
        return false;
}

private static boolean equalsGetSmallLetters() {
    count = 0;
    while(count < email.length()) {
        for (int smallLetterIndex = 0; smallLetterIndex < alphabeticSmall.length; smallLetterIndex++) {

            if(email.charAt(count) == alphabeticSmall[smallLetterIndex]){
                correctSmallLetters.add(email.charAt(count));
            }
        }
        count++;
    }
    count = 0;
    return correctSmallLetters.size() > 0;
}

private static boolean equalsGetLargeLetters() {
    count = 0;
    while(count < email.length()) {
        for (int largeLetterIndex = 0; largeLetterIndex < alphabeticLarge.length; largeLetterIndex++) {

            if(email.charAt(count) == alphabeticLarge[largeLetterIndex]){
                correctLargeLetters.add(email.charAt(count));
            }
        }
        count++;
    }
    count = 0;
    return correctLargeLetters.size() > 0;
}

public static boolean isEmailHasForbiddenSymbols(){
    count = 0;
    while(count < email.length()) {
        for (int symbolIndex = 0; symbolIndex < forbiddenSymbols.length; symbolIndex++) {

            if(email.charAt(count) == forbiddenSymbols[symbolIndex]){
                forbiddenSymbolsArray.add(email.charAt(count));
                //addToTheDynamicArray(email.charAt(count));
            }

        }
        count++;
    }
    count = 0;

    return forbiddenSymbolsArray.size() > 0;
}

/* THIS IS JUST A TEST METHOD... */
private static void addToTheDynamicArray(Character c){

    dynamicArray = new Character[dynamicArraySize];

    if (dynamicArray.length == 1) {
        dynamicArray[dynamicArraySize -1] = c;
        dynamicArraySize++;
    } else {
        dynamicArray = new Character[dynamicArraySize];
        dynamicArray[dynamicArraySize -1] = c;
        dynamicArraySize++;
    }
}

public static void removeForbiddenSymbols(EditText etEmail){

    try {
        count = 0;
        while (count < etEmail.getText().toString().length()) {
            for (int symbolIndex = 0; symbolIndex < forbiddenSymbols.length; symbolIndex++) {

                if (etEmail.getText().toString().charAt(count) == forbiddenSymbols[symbolIndex]) {
                    etEmail.setText(etEmail.getText().toString().replace(String.valueOf(etEmail.getText().toString().charAt(count)), ""));
                }
            }
            count++;
        }
        count = 0;
    }catch (Exception ignored) { }
}

public boolean isEmailCorrect() {return checkForAts() && checkForDots();}

private boolean checkForAts() {
    int atsCount = 0;
    ArrayList<Character> ats = new ArrayList<>();

    while(atsCount < email.length()){
        if(email.charAt(atsCount) == '@'){
            ats.add(email.charAt(atsCount));
        }
        atsCount++;
    }

    return ats.size() == 1;
}

public boolean isEmailHasValidEnd(){
    int validEndsCount = 0;
    int emailCharsCount = 0;
    while (emailCharsCount < email.length()){

        while(validEndsCount < validEnds.length){


            if(email.endsWith(validEnds[validEndsCount]))
                return true;

            validEndsCount++;
        }

        emailCharsCount++;
    }


    return false;
}

private boolean checkForDots() {
    int dotsCount = 0;
    ArrayList<Character> dots = new ArrayList<>();

    while(dotsCount < email.length()){
        if(email.charAt(dotsCount) == '.'){
            dots.add(email.charAt(dotsCount));
        }
        dotsCount++;
    }

    return dots.size() == 1;
}

public boolean isValidEmailAddress(String email) {
    String ePattern = "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$";
    java.util.regex.Pattern p = java.util.regex.Pattern.compile(ePattern);
    java.util.regex.Matcher m = p.matcher(email);
    return m.matches();
}