import java.io.*;
import java.awt.image.*;
import javax.servlet.*;
import javax.servlet.http.*;
import com.keypoint.PngEncoder;

public class ChartViewer extends HttpServlet 
{

  public void init() throws ServletException {
  }

  //Process the HTTP Get request
  public void doGet(HttpServletRequest request, HttpServletResponse response)
     throws ServletException, IOException {

   // get the chart from session
   HttpSession session = request.getSession();
   BufferedImage chartImage = (BufferedImage) session.getAttribute("chartImage");

   // set the content type so the browser can see this as a picture
   response.setContentType("image/png");

   // send the picture
   PngEncoder encoder = new PngEncoder(chartImage, false, 0, 9);
   response.getOutputStream().write(encoder.pngEncode());

  }

  //Process the HTTP Post request
  public void doPost(HttpServletRequest request, HttpServletResponse response)
     throws ServletException, IOException {
    doGet(request, response);
  }

  //Process the HTTP Put request
  public void doPut(HttpServletRequest request, HttpServletResponse response)
     throws ServletException, IOException {
  }

  //Clean up resources
  public void destroy() {
  }

}
------------------------

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.TransformerFactoryConfigurationError;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import org.w3c.dom.Document;


public class Generator extends HttpServlet {

    public static final String defContentType = "text/html; charset=UTF-8";
    public static final String contentTypeHTML = defContentType;
    // public static final String contentTypeXML = "text/xml; charset=UTF-8";
    // public static final String contentTypeCSV = "application/vnd.ms-excel";
    public static final String errorTemplate = "+++ERRORS+++";
    private static HashMap cache;

    public Generator() {
        super();
    }

    /**
     * @see javax.servlet.http.HttpServlet#doGet(javax.servlet.http.HttpServletRequest,
     *      javax.servlet.http.HttpServletResponse)
     */
    protected void doGet(HttpServletRequest request,
            HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    /**
     * @see javax.servlet.http.HttpServlet#doPost(javax.servlet.http.HttpServletRequest,
     *      javax.servlet.http.HttpServletResponse)
     */
    protected void doPost(HttpServletRequest request,
            HttpServletResponse response) throws ServletException, IOException {
        String contentType = null;
        Document doc = null;
        String xsl = null;
        contentType = (String) request.getAttribute("contenttype");
        if (contentType == null)
            contentType = defContentType;
        doc = (Document) request.getAttribute("xml-doc");
        xsl = (String) request.getAttribute("xsl-file-name");
        String path = getServletContext().getRealPath("/WEB-INF/xsl/");
        // Output goes in the response stream.
        PrintWriter out = response.getWriter();
        if (doc == null || xsl == null) {
            String errorMsg = "";
            if (doc == null)
                errorMsg += "XML document missing from call to OutputGenerator<br />";
            if (xsl == null)
                errorMsg += "XSL filename missing from call to OutputGenerator<br />";
            StringBuffer buf = generateError(errorMsg);
            log(errorMsg);
            out.write(buf.toString());
            return;
        }
        // The servlet returns HTML.
        response.setContentType(contentType);
        if (cache == null)
            cache = new HashMap();
        Transformer t = null;
        // Get the XML input document and the stylesheet.
        Source xmlSource = new DOMSource(doc);
        // Perform the transformation, sending the output to the response.
        // XSL processing can be time consuming, but this is mainly due to the
        // overhead
        // of compiling the XSL sheet.
        // By caching the compiled sheets, the process is speeded up
        // dramatically.
        // Time saved on subsequent requests can be 99% or more (hundreds of
        // milliseconds).
        try {
            // check if the XSL sheet was found in cache, and use that if
            // available
            if (cache.containsKey(xsl))
                t = (Transformer) cache.get(xsl);
            else {
                // otherwise, load the XSL sheet from disk, compile it and store
                // the compiled
                // sheet in the cache
                TransformerFactory tFactory = TransformerFactory.newInstance();
                Source xslSource = new StreamSource(
                        new File(path, xsl + ".xsl"));
                t = tFactory.newTransformer(xslSource);
                cache.put(xsl, t);
            }
            // perform the XSL transformation of the XML Document into the
            // servlet outputstream
            t.transform(xmlSource, new StreamResult(out));
        } catch (TransformerConfigurationException e) {
            e.printStackTrace();
            throw new ServletException(e);
        } catch (TransformerFactoryConfigurationError e) {
            e.printStackTrace();
            throw new ServletException(e);
        } catch (TransformerException e) {
            e.printStackTrace();
            throw new ServletException(e);
        }
    }

    private StringBuffer generateError(String error) throws IOException {
        String path = getServletContext().getRealPath("/WEB-INF/templates/");
        File f = new File(path, "callerror.html");
        FileInputStream fs = new FileInputStream(f);
        BufferedInputStream bis = new BufferedInputStream(fs);
        int numBytes = bis.available();
        byte b[] = new byte[numBytes];
        // read the template into a StringBuffer (via a byte array)
        bis.read(b);
        StringBuffer buf = new StringBuffer();
        buf.append(b);
        int start = buf.indexOf(errorTemplate);
        int end = start + errorTemplate.length();
        // replace placeholder with errormessage
        // (will automatically adjust to take longer or shorter data into
        // account)
        buf.replace(start, end, error);
        return buf;
    }
}

----------------

package com;

import java.io.*;
import java.awt.*;
import java.util.*;
import java.awt.image.*;
import org.jfree.data.*;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.chart.*;
import org.jfree.chart.plot.*;
import org.jfree.chart.urls.*;
import org.jfree.chart.entity.*;
import javax.servlet.http.*;

public class Pie3DDemo {

  public Pie3DDemo() {
  }

  private DefaultPieDataset getDataset() {
    // categories...
    String[] section = new String[] {
      "Jan","Feb","Mar","Apr","May","Jun",
      "Jul","Aug","Sep","Oct","Nov","Dec"
   };

    // data...
    double[] data = new double[section.length];
    for (int i = 0; i < data.length; i++) {
    data[i] = 10 + (Math.random() * 10);
    }

    // create the dataset...
    DefaultPieDataset dataset = new DefaultPieDataset();
    for (int i = 0; i < data.length; i++) {
    dataset.setValue(section[i], data[i]);
    }
    return dataset;
  }

  public String getChartViewer(HttpServletRequest request, HttpServletResponse response) {
    DefaultPieDataset dataset = getDataset();
    // create the chart...
    JFreeChart chart = ChartFactory.createPieChart(
      "Pie3D Chart Demo",  // chart title
      dataset,             // data
      true,                // include legend
      true,
      false
    );

    // set the background color for the chart...
    chart.setBackgroundPaint(Color.cyan);
    PiePlot plot = (PiePlot) chart.getPlot();
    plot.setNoDataMessage("No data available");

    // set drilldown capability...
    plot.setURLGenerator(new StandardPieURLGenerator("Bar3DDemo.jsp","section"));
    plot.setLabelGenerator(null);

    // OPTIONAL CUSTOMISATION COMPLETED.

    ChartRenderingInfo info = null;
    HttpSession session = request.getSession();
    try {

      //Create RenderingInfo object
      response.setContentType("text/html");
      info = new ChartRenderingInfo(new StandardEntityCollection());
      BufferedImage chartImage = chart.createBufferedImage(640, 400, info);

      // putting chart as BufferedImage in session, 
      // thus making it available for the image reading action Action.
      session.setAttribute("chartImage", chartImage);

      PrintWriter writer = new PrintWriter(response.getWriter());
      ChartUtilities.writeImageMap(writer, "imageMap", info, false);
      writer.flush();

    }
    catch (Exception e) {
       // handel your exception here
    }

    String pathInfo = "http://";
    pathInfo += request.getServerName();
    int port = request.getServerPort();
    pathInfo += ":"+String.valueOf(port);
    pathInfo += request.getContextPath();
    String chartViewer = pathInfo + "/servlet/ChartViewer";
    return chartViewer;
  }
}

------------

package com;

import java.io.IOException;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

//import org.apache.xerces.dom.DocumentImpl;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

/**
 * @author Jeroen Wenting
 */
public class XSLTest extends HttpServlet {
    /**
     * 
     */
    private static final long serialVersionUID = 1L;

    /**
     * @see javax.servlet.http.HttpServlet#doGet(javax.servlet.http.HttpServletRequest,
     *      javax.servlet.http.HttpServletResponse)
     */
    protected void doGet(HttpServletRequest arg0, HttpServletResponse arg1)
            throws ServletException, IOException {
        doPost(arg0, arg1);
    }

    /**
     * @see javax.servlet.http.HttpServlet#doPost(javax.servlet.http.HttpServletRequest,
     *      javax.servlet.http.HttpServletResponse)
     */
    protected void doPost(HttpServletRequest request,
            HttpServletResponse response) throws ServletException, IOException {
        String xslFilename = "test";//getInitParameter("xslfile-html");
        //String beanName = getInitParameter("formbean");
        String contentType = "text/html; charset=UTF-8";//getInitParameter("contenttype");
        request.setAttribute("xsl-file-name", xslFilename);
        try {
            if (contentType != null)
                request.setAttribute("contenttype", contentType);
            DocumentBuilderFactory factory = DocumentBuilderFactory
                    .newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            // Document doc = new DocumentImpl();
            Document doc = builder.newDocument();
            Element root = doc.createElement("ehwa-doc");
            // generate XML for transformation
            Element elem = doc.createElement("focuscontrol");
            elem.appendChild(doc.createTextNode("alert('loaded')"));
            root.appendChild(elem);
            elem = doc.createElement("data");
            elem.appendChild(doc.createTextNode("Hello World!"));
            root.appendChild(elem);
            doc.appendChild(root);
            request.setAttribute("xml-doc", doc);
            RequestDispatcher rd = request
                    .getRequestDispatcher("/servlet/generator");
            rd.forward(request, response);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

--------

package jstl;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;

import java.io.IOException;
import javax.servlet.jsp.tagext.SimpleTagSupport;
import javax.servlet.jsp.tagext.TagSupport;

import com.Pie3DDemo;

public class ChartTagClass extends SimpleTagSupport {

    private String user;
    private String chartType;
    private HttpServletRequest request;
    private HttpServletResponse response;
    private Pie3DDemo myChart = new Pie3DDemo();
    private String chartViewer;

    public void setUser(String user) {
    this.user = user;
    }

    public void setChartType(String chartType) {
    this.chartType = chartType;
    }

    public void setReq(HttpServletRequest request) {
    this.request = request;
    }

    public void setRes(HttpServletResponse response) {
    this.response = response;
    }

    public void doTag() throws JspException, IOException {
    chartViewer = myChart.getChartViewer(request, response);        
    getJspContext().getOut().write("<img src=\""+chartViewer+"\" border=0 usemap=\"#imageMap\">");  
    }

    public String getChart() {
    return "Hai";
    }
}

--------

<?xml version="1.0" encoding="UTF-8"?>
<taglib version="2.0" xmlns="http://java.sun.com/xml/ns/j2ee" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee web-jsptaglibrary_2_0.xsd">
  <tlib-version>1.2</tlib-version>
    <short-name>ct</short-name>
    <uri>charts.tld</uri>
    <tag>
    <name>chart</name>
    <tag-class>jstl.ChartTagClass</tag-class>
    <body-content>empty</body-content>
    <info>This Tag Displays charts</info>
    <attribute>
        <name>user</name>
        <required>true</required>
        <description>UserName</description>
        <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
        <name>chartType</name>
        <required>true</required>
        <description>Chart type</description>
        <rtexprvalue>true</rtexprvalue>
    </attribute>    
    <attribute>
        <name>req</name>
        <required>true</required>
        <description>Chart request</description>
        <rtexprvalue>true</rtexprvalue>
    </attribute>  
    <attribute>
        <name>res</name>
        <required>true</required>
        <description>Chart response</description>
        <rtexprvalue>true</rtexprvalue>
    </attribute>          
    </tag>
</taglib>

-----------


<%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1"%>
<%@ taglib prefix="c" uri="charts.tld" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Pie Chart Demo</title>
</head>


<body>
<c:chart user="ilaya" chartType="pie" req="<%=request%>" res="<%=response%>"/>

</body>
</html>

--------


<?xml version="1.0" encoding="UTF-8"?>

<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">

  <display-name>XSLT</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>

  <servlet>
    <servlet-name>Servlet</servlet-name>
    <servlet-class>com.XSLTest</servlet-class>
  </servlet>

  <servlet-mapping>
    <servlet-name>Servlet</servlet-name>
    <url-pattern>/servlet</url-pattern>
  </servlet-mapping>

    <servlet>
    <servlet-name>ServletG</servlet-name>
    <servlet-class>com.Generator</servlet-class>
  </servlet>

  <servlet-mapping>
    <servlet-name>ServletG</servlet-name> 
    <url-pattern>/servlet/generator</url-pattern>
  </servlet-mapping>

    <servlet>
    <servlet-name>ChartViewer</servlet-name>
    <servlet-class>com.ChartViewer</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>ChartViewer</servlet-name>
    <url-pattern>/servlet/ChartViewer</url-pattern>
  </servlet-mapping>


</web-app>

-------

<?xml version="1.0"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    version="1.0">
    <xsl:output method="html" indent="yes" />
    <xsl:template match="ehwa-doc">
        <html>
            <body>
                <xsl:attribute name="onload"><xsl:apply-templates
                    select="focuscontrol" /></xsl:attribute>
                <form>
                    <input type="hidden" value="1" name="runset" id="runset" />
                </form>
            </body>
        </html>
    </xsl:template>
    <xsl:template match="focuscontrol">
        <xsl:value-of select="." />
    </xsl:template>
</xsl:stylesheet>

-----------


<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US" xml:lang="en-US">
<head>
<title></title>
</head>
<body>
+++ERRORS+++
</body>
</html>