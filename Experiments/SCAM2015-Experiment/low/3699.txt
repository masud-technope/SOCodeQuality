import java.security.SecureRandom;
import java.util.concurrent.atomic.AtomicInteger;

public class MultiThreadedTask implements Runnable {

    private SecureRandom secureRandom;
    private AtomicInteger outputCount;

    public MultiThreadedTask(SecureRandom secureRandom, AtomicInteger outputCount) {
        this.secureRandom = secureRandom;
        this.outputCount = outputCount;
    }

    @Override
    public void run() {
        while (outputCount.get() < 100) {
            String output = task();
            if (output != null && outputCount.get() < 100) {
                System.out.println(Thread.currentThread().getName() + " -- "+ outputCount.incrementAndGet());
            }
        }
    }

    public String task() {
        return secureRandom.nextDouble() > 0.5 ? "output" : null;
    }

}

import java.security.SecureRandom;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;

public class TestMain {

    private SecureRandom secureRandom = new SecureRandom();
    private AtomicInteger outputCount = new AtomicInteger();

    public static void main(String[] args) {
        new TestMain().test();
    }

    public void test() {
        ExecutorService executor = Executors.newFixedThreadPool(4);
        for(int i =0; i < 4; i++) {
            executor.execute(new MultiThreadedTask(secureRandom, outputCount));
        }
        executor.shutdown();
    }
}