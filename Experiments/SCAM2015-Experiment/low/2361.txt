/**
 * This is a class you can plug everywhere, (better if you use it as a singleton)
 */
public class ConnectionHelper {
    // Our Main Datasource.
    private final DataSource _dataSource;
    // Our Constructor, in which we get the user/pass and connection uri, I also load the DriverName, since I may have more than once version of the same JDBC driver.
    ConnectionHelper (String driverName, String connectionURI, String user, String password) throws Exception {
        // Loading underlying JDBC driver
        try {
            Class.forName(driverName);
        } catch (ClassNotFoundException e) {
            throw new Exception("Driver not found on the classpath");
        }
        _dataSource = setupDataSource(connectionURI, user, password);
    }
    // This method will return the connection from the pool
    public Connection getConnection() throws SQLException {
        Connection connection;
        connection = _dataSource.getConnection();
        return connection;
    }
    // Here we create the DataSource
    private DataSource setupDataSource(String connectURI, String userName, String password) {
        // First, we'll create a ConnectionFactory that the
        // pool will use to create Connections.
        // We'll use the DriverManagerConnectionFactory,
        // using the connect string passed by parameter
        ConnectionFactory connectionFactory = new DriverManagerConnectionFactory(connectURI, userName, password);
        // Next we'll create the PoolableConnectionFactory, which wraps
        // the "real" Connections created by the ConnectionFactory with
        // the classes that implement the pooling functionality.
        PoolableConnectionFactory poolableConnectionFactory = new PoolableConnectionFactory(connectionFactory, null);
        // Now we'll need a ObjectPool that serves as the
        // actual pool of connections.
        // We'll use a GenericObjectPool instance, although
        // any ObjectPool implementation will suffice.
        GenericObjectPool<PoolableConnection> connectionPool = new GenericObjectPool<>(poolableConnectionFactory);
        // Set the maximum set of connections you want to hold
        connectionPool.setMaxIdle(20);
        // Set the factory's pool property to the owning pool
        poolableConnectionFactory.setPool(connectionPool);
        // Set the AutoCommit as false to handle the Commit/Close by yourself
        poolableConnectionFactory.setDefaultAutoCommit(false);
        // Finally, we create the PoolingDriver itself,
        // passing in the object pool we created.
        PoolingDataSource<PoolableConnection> dataSource = new PoolingDataSource<>(connectionPool);
        return dataSource;
    }
}