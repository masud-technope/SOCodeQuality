This is actually the best solution I've seen yet, very well done. It's not completely suited to my needs because of the way Android likes to break words when wrapping, so I'll be sticking with my custom solution- but your class is much better for general use.
where is the donate button? Thanks man!
In the spirit of Android, it's all yours! And hopefully when you build something that may be useful, you are able to share that.
Let me look into this in the morning. I don't remember why I was subtracting 1 from the result. That functions seems to be returning a 0 based line index. Could be a bug. I will update.
Ok, so I made an update to the code. Subtracting 1 from the line index was intentional and I added a comment. The error you got was probably from when there was not enough height to render even one line of text. I added a check and cleared the text in that case. (I work in Shibuya so I'd be up for a beer anytime.
I believe that would not work for several reasons. Apart from being hard to implement, the resulting image would only be scaling the height since the width is generally determined and this code re-sizes the font until there is no more vertical overflow. Also, when scaling text images, you will most likely find the text to be blurry if the scaling does not happen on an exact pixel boundary. I find the rendering and remeasuring of text to be fast enough for all of my use cases. Have you experienced performance issues?
There's issues with this code on Android 4.1 that I'm currently investigating.
Did you try the latest edited version. I made a small change for Jelly Bean about a week ago. This should probably be up on github.
It's a very minor point but you don't need import android.graphics.Canvas any more.
I am having some issues with android 4.0. What is happening is the text is shrunk down to fit the string inside it but only the part of the string that would have fit without shrinking is being drawn. So if I have two words only the first word is shown but it is shown with the smaller text size. This works perfect on devices with pre 4.0.
Hey @Chase, thanks for the great class! Have you seen issues with text rendering in different sizes in an adapter? I'm using a SimpleCursorAdapter to put text in a GridView. I'm using a ViewBinder to set variable text from the adapter to the AutoResizeTextView, and then immediately resizing it (in the ViewBinder). I'm calling resizeWidth with a width and height that I've checked is consistent. But on different view loads or during scrolling, I get different text sizes for the same string, (e.g. http://i49.tinypic.com/2znwxo2.png vs http://i50.tinypic.com/mrpo35.png), at times overflowing.
I really need to move this over to github. android developer, As you know, this class does not scale up. It can be changed to do so but you have to be careful regarding word and character wrapping. Bobbake4, I am using several 4.0+ devices and do not have the same issue. Did you ever find out what the problem was? annie, Keep in mind that an adapter will reuse views so you may have to reset values at some point before measuring. Try debugging the onMeasure and onLayout methods for more insight.
Added WTFPL. Does this mean everything on SO is copyrighted unless otherwise stated? If so, I have a lot code to cut from my projects! :)
@chase please take a minute and add it to github. I would love to track your changes and have a wiki/issue section. It works on 2.3 but on 4.2 it is wrapping the text in an odd way. I can't quite figure why  the textview text is breaking where it is but the code determines a good font size but it falls off the view because of the weird line breaks pushes it down. Has anyone seen this?
Doesn't work. Tried it on new Huawei Y200 running Android 4.0.
does not work for TextView inside ListView Items as well as inside Include other layout.
I made two changes to get it to work, removed textHeight > height check and set the text at the end: if (mAddEllipsis && targetTextSize == mMinTextSize) {...} else { setText(text); }
