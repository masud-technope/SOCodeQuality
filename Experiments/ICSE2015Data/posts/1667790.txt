<p>Parsing the query string is a bit more complicated than it seems, depending on how forgiving you want to be.</p>

<p>First, the query string is ascii bytes.  You read in these bytes one at a time and convert them to characters.  If the character is ? or &amp; then it signals the start of a parameter name.  If the character is = then it signals the start of a paramter value.  If the character is % then it signals the start of an encoded byte.  Here is where it gets tricky.</p>

<p>When you read in a % char you have to read the next two bytes and interpret them as hex digits.  That means the next two bytes will be 0-9, a-f or A-F.  Glue these two hex digits together to get your byte value.  But remember, <strong>bytes are not characters</strong>.  You have to know what encoding was used to encode the characters.  The character Ã© does not encode the same in UTF-8 as it does in ISO-8859-1.  In general it's impossible to know what encoding was used for a given character set.  I always use UTF-8 because my web site is configured to always serve everything using UTF-8 but in practice you can't be certain.  Some user-agents will tell you the character encoding in the request; you can try to read that if you have a full HTTP request.  If you just have a url in isolation, good luck.</p>

<p>Anyway, assuming you are using UTF-8 or some other multi-byte character encoding, now that you've decoded one encoded byte you have to set it aside until you capture the next byte.  You need all the encoded bytes that are together because you can't url-decode properly one byte at a time.  Set aside all the bytes that are together then decode them all at once to reconstruct your character.</p>

<p>Plus it gets more fun if you want to be lenient and account for user-agents that mangle urls.  For example, some webmail clients double-encode things.  Or double up the ?&amp;= chars (for example:  <code>http://yoursite.com/blah??p1==v1&amp;&amp;p2==v2</code>).  If you want to try to gracefully deal with this, you will need to add more logic to your parser.</p>
