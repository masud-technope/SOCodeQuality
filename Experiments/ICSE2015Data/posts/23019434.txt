<p>This is my method, you can define and input and output format.</p>

<pre><code>public static String formattedDateFromString(String inputFormat, String outputFormat, String inputDate){
    if(inputFormat.equals("""")){ // if inputFormat = """", set a default input format.
        inputFormat = ""yyyy-MM-dd hh:mm:ss"";
    }
    if(outputFormat.equals("""")){
        outputFormat = ""EEEE d 'de' MMMM 'del' yyyy""; // if inputFormat = """", set a default output format.
    }
    Date parsed = null;
    String outputDate = """";

    SimpleDateFormat df_input = new SimpleDateFormat(inputFormat, java.util.Locale.getDefault());
    SimpleDateFormat df_output = new SimpleDateFormat(outputFormat, java.util.Locale.getDefault());

    // You can set a different Locale, This example set a locale of Country Mexico.
    //SimpleDateFormat df_input = new SimpleDateFormat(inputFormat, new Locale(""es"", ""MX""));
    //SimpleDateFormat df_output = new SimpleDateFormat(outputFormat, new Locale(""es"", ""MX""));

    try {
        parsed = df_input.parse(inputDate);
        outputDate = df_output.format(parsed);
    } catch (Exception e) { 
        Log.e(""formattedDateFromString"", ""Exception in formateDateFromstring(): "" + e.getMessage());
    }
    return outputDate;

}
</code></pre>
