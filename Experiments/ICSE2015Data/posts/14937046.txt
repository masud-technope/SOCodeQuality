<p>This may be useful for someone else looking at this question. I rewrote Justin's code to allow the method to receive the target size object required as well. This works very well when using Canvas. All credit should go to JUSTIN for his great initial code.</p>

<pre><code>    private Bitmap getBitmap(int path, Canvas canvas) {

        Resources resource = null;
        try {
            final int IMAGE_MAX_SIZE = 1200000; // 1.2MP
            resource = getResources();

            // Decode image size
            BitmapFactory.Options options = new BitmapFactory.Options();
            options.inJustDecodeBounds = true;
            BitmapFactory.decodeResource(resource, path, options);

            int scale = 1;
            while ((options.outWidth * options.outHeight) * (1 / Math.pow(scale, 2)) &gt; 
                  IMAGE_MAX_SIZE) {
               scale++;
            }
            Log.d(""TAG"", ""scale = "" + scale + "", orig-width: "" + options.outWidth + "", orig-height: "" + options.outHeight);

            Bitmap pic = null;
            if (scale &gt; 1) {
                scale--;
                // scale to max possible inSampleSize that still yields an image
                // larger than target
                options = new BitmapFactory.Options();
                options.inSampleSize = scale;
                pic = BitmapFactory.decodeResource(resource, path, options);

                // resize to desired dimensions
                int height = canvas.getHeight();
                int width = canvas.getWidth();
                Log.d(""TAG"", ""1th scale operation dimenions - width: "" + width + "", height: "" + height);

                double y = Math.sqrt(IMAGE_MAX_SIZE
                        / (((double) width) / height));
                double x = (y / height) * width;

                Bitmap scaledBitmap = Bitmap.createScaledBitmap(pic, (int) x, (int) y, true);
                pic.recycle();
                pic = scaledBitmap;

                System.gc();
            } else {
                pic = BitmapFactory.decodeResource(resource, path);
            }

            Log.d(""TAG"", ""bitmap size - width: "" +pic.getWidth() + "", height: "" + pic.getHeight());
            return pic;
        } catch (Exception e) {
            Log.e(""TAG"", e.getMessage(),e);
            return null;
        }
    }
</code></pre>

<p>Justin's code is VERY effective at reducing the overhead of working with large Bitmaps. </p>
