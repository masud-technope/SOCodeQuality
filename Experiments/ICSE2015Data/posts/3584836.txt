<p>My colleague wrote an article explaining Application State on Android devices including explanations on Activity Lifecycle and State Information, How to Store State Information, and saving to State <code>Bundle</code> and <code>SharedPreferences</code> and <a href=""http://www.eigo.co.uk/Managing-State-in-an-Android-Activity.aspx"">take a look at here</a>.</p>

<p>The article covers three approaches:</p>

<h2>Store local varible/UI control data for application lifetime (ie temporarily) using Instance State Bundle</h2>

<pre><code>[Code sample â€“ Store State in State Bundle]
@Override
public void onSaveInstanceState(Bundle savedInstanceState) 
{
  // Store UI state to the savedInstanceState.
  // This bundle will be passed to onCreate on next call.  EditText txtName = (EditText)findViewById(R.id.txtName);
  String strName = txtName.getText().toString();

  EditText txtEmail = (EditText)findViewById(R.id.txtEmail);
  String strEmail = txtEmail.getText().toString();

  CheckBox chkTandC = (CheckBox)findViewById(R.id.chkTandC);
  boolean blnTandC = chkTandC.isChecked();

  savedInstanceState.putString(â€œNameâ€?, strName);
  savedInstanceState.putString(â€œEmailâ€?, strEmail);
  savedInstanceState.putBoolean(â€œTandCâ€?, blnTandC);

  super.onSaveInstanceState(savedInstanceState);
}
</code></pre>

<h2>Store local varible/UI control data between application instances (ie permanently) using Shared Preferences</h2>

<pre><code>[Code sample â€“ Store State in SharedPreferences]
@Override
protected void onPause() 
{
  super.onPause();

  // Store values between instances here
  SharedPreferences preferences = getPreferences(MODE_PRIVATE);
  SharedPreferences.Editor editor = preferences.edit();  // Put the values from the UI
  EditText txtName = (EditText)findViewById(R.id.txtName);
  String strName = txtName.getText().toString();

  EditText txtEmail = (EditText)findViewById(R.id.txtEmail);
  String strEmail = txtEmail.getText().toString();

  CheckBox chkTandC = (CheckBox)findViewById(R.id.chkTandC);
  boolean blnTandC = chkTandC.isChecked();

  editor.putString(â€œNameâ€?, strName); // value to store
  editor.putString(â€œEmailâ€?, strEmail); // value to store
  editor.putBoolean(â€œTandCâ€?, blnTandC); // value to store    
  // Commit to storage
  editor.commit();
}
</code></pre>

<h2>Keeping object instances alive in memory between activities within application lifetime using Retained Non-Configuration Instance</h2>

<pre><code>[Code sample â€“ store object instance]
private cMyClassType moInstanceOfAClass;// Store the instance of an object
@Override
public Object onRetainNonConfigurationInstance() 
{
  if (moInstanceOfAClass != null) // Check that the object exists
      return(moInstanceOfAClass);
  return super.onRetainNonConfigurationInstance();
}
</code></pre>
