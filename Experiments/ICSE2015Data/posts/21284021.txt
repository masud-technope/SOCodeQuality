<p>There are several alternatives to the accepted answer, each with different trade-offs. Let me start by saying that the accepted answer is good, and I up-voted it, but it isn't the only way and it does have some down-sides:</p>

<ul>
<li>AsyncTask's created as non-static inner classes have an implicit reference to the enclosing Activity object, its context, and the entire View hierarchy created by that activity. This reference prevents the Activity from being garbage collected until the AsyncTask's background work completes. If the user's connection is slow, and/or the download is large, these short-term memory leaks can become a problem - for example if the orientation changes several times (and you don't cancel the executing tasks), or the user navigates away from the Activity.</li>
<li>AsyncTask has different execution characteristics depending on the platform it executes on: prior to API level 4 AsyncTasks execute serially on a single background thread; from API level 4 through API level 10, AsyncTasks execute on a pool of up to 128 threads; from API level 11 onwards AsyncTask executes serially on a single background thread (unless you use the overloaded <code>executeOnExecutor</code> method and supply an alternative executor). Code that works fine when run serially on ICS may break when executed concurrently on Gingerbread, say, if you have inadvertent order-of-execution dependencies.</li>
</ul>

<p>If you want to avoid short-term memory leaks, have well defined execution characteristics across all platforms, and have a base to build really robust network handling, you might want to consider:</p>

<ol>
<li>Using a library that does a nice job of this for you - there's a nice comparison of networking libs in <a href=""http://stackoverflow.com/questions/16902716/comparison-of-android-networking-libraries-okhttp-retrofit-volley"">this question</a>, or</li>
<li>Using a <code>Service</code> or <code>IntentService</code> instead, perhaps with a <code>PendingIntent</code> to return the result via the Activity's <code>onActivityResult</code> method.</li>
</ol>

<h2>IntentService approach</h2>

<p>Down-sides:</p>

<ul>
<li>More code and complexity than <code>AsyncTask</code>, though not as much as you might think</li>
<li>Will queue requests and run them on a <em>single</em> background thread. You can easily control this by replacing <code>IntentService</code> with an equivalent <code>Service</code> implementation, perhaps like <a href=""https://github.com/steveliles/AsyncAndroid/blob/master/AsyncAndroid/src/main/java/com/packt/asyncandroid/chapter6/ConcurrentIntentService.java"">this one</a>.</li>
<li>Um, I can't think of any others right now actually</li>
</ul>

<p>Up-sides:</p>

<ul>
<li>Avoids the short-term memory leak problem</li>
<li>If your activity restarts while network operations are in-flight it can still receive the result of the download via its <code>onActivityResult</code> method</li>
<li>Better platform than AsyncTask to build and re-use robust networking code. Example: if you need to do an important upload, you could do it from <code>AsyncTask</code> in an <code>Activity</code>, but if the user context-switches out of the app to take a phone-call, the system <em>may</em> kill the app before the upload completes. It is <em>less likely</em> to kill an application with an active <code>Service</code>.</li>
<li>If you use your own concurrent version of <code>IntentService</code> (like the one I linked above) you can control the level of concurrency via the <code>Executor</code>.</li>
</ul>

<h2>Implementation summary</h2>

<p>You can implement an <code>IntentService</code> to perform downloads on a single background thread quite easily.</p>

<p>Step 1: Create an <code>IntentService</code> to perform the download. You can tell it what to download via <code>Intent</code> extra's, and pass it a <code>PendingIntent</code> to use to return the result to the <code>Activity</code>:</p>

<pre><code>import android.app.IntentService;
import android.app.PendingIntent;
import android.content.Intent;
import android.util.Log;

import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;

public class DownloadIntentService extends IntentService {

    private static final String TAG = DownloadIntentService.class.getSimpleName();

    public static final String PENDING_RESULT_EXTRA = ""pending_result"";
    public static final String URL_EXTRA = ""url"";
    public static final String RSS_RESULT_EXTRA = ""url"";

    public static final int RESULT_CODE = 0;
    public static final int INVALID_URL_CODE = 1;
    public static final int ERROR_CODE = 2;

    private IllustrativeRSSParser parser;

    public DownloadIntentService() {
        super(TAG);

        // make one and re-use, in the case where more than one intent is queued
        parser = new IllustrativeRSSParser();
    }

    @Override
    protected void onHandleIntent(Intent intent) {
        PendingIntent reply = intent.getParcelableExtra(PENDING_RESULT_EXTRA);
        InputStream in = null;
        try {
            try {
                URL url = new URL(intent.getStringExtra(URL_EXTRA));
                IllustrativeRSS rss = parser.parse(in = url.openStream());

                Intent result = new Intent();
                result.putExtra(RSS_RESULT_EXTRA, rss);

                reply.send(this, RESULT_CODE, result);
            } catch (MalformedURLException exc) {
                reply.send(INVALID_URL_CODE);
            } catch (Exception exc) {
                // could do better by treating the different sax/xml exceptions individually
                reply.send(ERROR_CODE);
            }
        } catch (PendingIntent.CanceledException exc) {
            Log.i(TAG, ""reply cancelled"", exc);
        }
    }
}
</code></pre>

<p>Step 2: Register the service in the manifest:</p>

<pre><code>&lt;service
        android:name="".DownloadIntentService""
        android:exported=""false""/&gt;
</code></pre>

<p>Step 3: Invoke the service from the Activity, passing a PendingResult object which the Service will use to return the result:</p>

<pre><code>PendingIntent pendingResult = createPendingResult(
    RSS_DOWNLOAD_REQUEST_CODE, new Intent(), 0);
Intent intent = new Intent(getApplicationContext(), DownloadIntentService.class);
intent.putExtra(DownloadIntentService.URL_EXTRA, URL);
intent.putExtra(DownloadIntentService.PENDING_RESULT_EXTRA, pendingResult);
startService(intent);
</code></pre>

<p>Step 4: Handle the result in onActivityResult:</p>

<pre><code>@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    if (requestCode == RSS_DOWNLOAD_REQUEST_CODE) {
        switch (resultCode) {
            case DownloadIntentService.INVALID_URL_CODE:
                handleInvalidURL();
                break;
            case DownloadIntentService.ERROR_CODE:
                handleError(data);
                break;
            case DownloadIntentService.RESULT_CODE:
                handleRSS(data);
                break;
        }
        handleRSS(data);
    }
    super.onActivityResult(requestCode, resultCode, data);
}
</code></pre>

<p>A github project containing a complete working Android-Studio/gradle project is available <a href=""https://github.com/steveliles/Android-Download-Service-Example"">here</a>.</p>
